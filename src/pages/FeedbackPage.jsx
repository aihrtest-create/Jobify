import React, { useState, useEffect } from 'react'
import { useParams, useNavigate, Link } from 'react-router-dom'

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é, –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 * @returns {JSX.Element} –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
const FeedbackPage = () => {
  const { interviewId } = useParams()
  const navigate = useNavigate()
  const [interview, setInterview] = useState(null)
  const [feedback, setFeedback] = useState(null)
  const [isGeneratingFeedback, setIsGeneratingFeedback] = useState(false)

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ localStorage
    const interviews = JSON.parse(localStorage.getItem('interviews') || '[]')
    const currentInterview = interviews.find(item => item.id === parseInt(interviewId))
    
    if (!currentInterview) {
      // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      navigate('/dashboard')
      return
    }

    setInterview(currentInterview)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–¥–±–µ–∫
    const savedFeedback = localStorage.getItem(`feedback_${interviewId}`)
    if (savedFeedback) {
      setFeedback(JSON.parse(savedFeedback))
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      generateFeedback(currentInterview)
    }
  }, [interviewId, navigate])

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤—å—é
   * –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM API
   * @param {Object} interviewData - –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
   */
  const generateFeedback = async (interviewData) => {
    setIsGeneratingFeedback(true)
    
    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    setTimeout(() => {
      const mockFeedback = {
        overallScore: 7.8,
        scores: {
          technical: 8.2,
          communication: 7.5,
          problemSolving: 8.0,
          cultural: 7.3
        },
        strengths: [
          '–û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π',
          '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã',
          '–•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞'
        ],
        improvements: [
          '–ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
          '–ê–∫—Ç–∏–≤–Ω–µ–µ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
          '–£–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'
        ],
        recommendations: [
          '–ò–∑—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ',
          '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
          '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤'
        ],
        nextSteps: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è! –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∏—Ö –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—é.'
      }
      
      setFeedback(mockFeedback)
      localStorage.setItem(`feedback_${interviewId}`, JSON.stringify(mockFeedback))
      setIsGeneratingFeedback(false)
    }, 3000)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
   * @param {number} score - –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10
   * @returns {string} CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Ü–≤–µ—Ç–∞
   */
  const getScoreColor = (score) => {
    if (score >= 8) return 'text-green-600 bg-green-100'
    if (score >= 6) return 'text-yellow-600 bg-yellow-100'
    return 'text-red-600 bg-red-100'
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   * @param {number} score - –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 10
   * @returns {string} CSS –∫–ª–∞—Å—Å –¥–ª—è —à–∏—Ä–∏–Ω—ã
   */
  const getProgressWidth = (score) => {
    return `${(score / 10) * 100}%`
  }

  if (!interview) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-black border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <Link 
              to="/dashboard"
              className="w-10 h-10 bg-white border border-gray-200 rounded-full flex items-center justify-center hover:bg-gray-50 transition-colors"
              aria-label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É"
            >
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </Link>
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-black">
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
              </h1>
              <p className="text-sm text-gray-500 mt-1">
                {new Date(interview.endedAt).toLocaleDateString('ru-RU', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </p>
            </div>
          </div>
        </div>

        {isGeneratingFeedback ? (
          /* Loading State */
          <div className="bg-white rounded-2xl p-8 shadow-sm text-center">
            <div className="w-16 h-16 border-4 border-black border-t-transparent rounded-full animate-spin mx-auto mb-6"></div>
            <h3 className="text-xl font-semibold text-black mb-2">
              –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            </h3>
            <p className="text-gray-500">
              –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...
            </p>
          </div>
        ) : feedback && (
          <div className="space-y-6">
            {/* Overall Score */}
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <div className="text-center">
                <div className="inline-flex items-center justify-center w-20 h-20 bg-black rounded-full text-white text-2xl font-bold mb-4">
                  {feedback.overallScore}
                </div>
                <h2 className="text-xl font-semibold text-black mb-2">
                  –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                </h2>
                <p className="text-gray-500 text-sm">
                  –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ö–æ—Ä–æ—à–∏–µ –Ω–∞–≤—ã–∫–∏.
                </p>
              </div>
            </div>

            {/* Detailed Scores */}
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-black mb-6">
                –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
              </h3>
              <div className="space-y-4">
                {Object.entries({
                  technical: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
                  communication: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
                  problemSolving: '–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á',
                  cultural: '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'
                }).map(([key, label]) => (
                  <div key={key} className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">{label}</span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getScoreColor(feedback.scores[key])}`}>
                          {feedback.scores[key]}/10
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-black h-2 rounded-full transition-all duration-500"
                          style={{ width: getProgressWidth(feedback.scores[key]) }}
                        ></div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Strengths */}
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-black mb-4 flex items-center gap-2">
                <span className="text-green-500">üí™</span>
                –í–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
              </h3>
              <ul className="space-y-3">
                {feedback.strengths.map((strength, index) => (
                  <li key={index} className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-green-600 text-xs">‚úì</span>
                    </div>
                    <span className="text-gray-700 text-sm">{strength}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Areas for Improvement */}
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-black mb-4 flex items-center gap-2">
                <span className="text-blue-500">üéØ</span>
                –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
              </h3>
              <ul className="space-y-3">
                {feedback.improvements.map((improvement, index) => (
                  <li key={index} className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-blue-600 text-xs">‚Üí</span>
                    </div>
                    <span className="text-gray-700 text-sm">{improvement}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Recommendations */}
            <div className="bg-white rounded-2xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-black mb-4 flex items-center gap-2">
                <span className="text-purple-500">üí°</span>
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </h3>
              <ul className="space-y-3">
                {feedback.recommendations.map((recommendation, index) => (
                  <li key={index} className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-purple-600 text-xs">‚òÖ</span>
                    </div>
                    <span className="text-gray-700 text-sm">{recommendation}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Next Steps */}
            <div className="bg-gradient-to-r from-black to-gray-800 rounded-2xl p-6 text-white">
              <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                <span>üöÄ</span>
                –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
              </h3>
              <p className="text-gray-200 leading-relaxed">
                {feedback.nextSteps}
              </p>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-3">
              <Link
                to="/dashboard"
                className="flex-1 bg-black text-white px-6 py-3 rounded-full text-center font-medium hover:bg-gray-800 transition-colors"
              >
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
              </Link>
              <Link
                to="/interview"
                className="flex-1 bg-white border border-gray-200 text-black px-6 py-3 rounded-full text-center font-medium hover:bg-gray-50 transition-colors"
              >
                –ù–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
              </Link>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default FeedbackPage